// src/pages/admin/product/Detail.jsx
import React, { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axiosInstance from "../../../utils/axiosConfig";

// helpers nh·ªè cho date
const isoToDateInput = (iso) => (iso ? new Date(iso).toISOString().slice(0, 10) : "");
const toISOorNull = (d) => (d ? new Date(d).toISOString() : null);

export default function Detail() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);

  // Danh m·ª•c / ƒê·ªãa ƒëi·ªÉm
  const [categories, setCategories] = useState([]);
  const [locations, setLocations] = useState([]);

  // ----- State UI: Expiry -----
  const [enableExpiry, setEnableExpiry] = useState(false);
  const [expireDate, setExpireDate] = useState("");       // yyyy-mm-dd
  const [mfgDate, setMfgDate] = useState("");             // yyyy-mm-dd
  const [shelfLifeDays, setShelfLifeDays] = useState("");

  const [nearActive, setNearActive] = useState(false);
  const [thresholdDays, setThresholdDays] = useState(0);
  const [discountPercent, setDiscountPercent] = useState(0);

  // Preview nhanh HSD t·ª´ server (n·∫øu c√≥)
  const expiryView = useMemo(() => {
    // h·ªó tr·ª£ c·∫£ _expiry l·∫´n expiryView t·ª´ service
    if (!product) return null;
    const ev = product.expiryView || {};
    const calc = product._expiry || {};
    return {
      expireAt: ev.expiryDate || calc.expireAt || null,
      daysLeft:
        typeof ev.daysLeft === "number"
          ? ev.daysLeft
          : typeof calc.daysLeft === "number"
          ? calc.daysLeft
          : null,
      isNearExpiry: ev.isNearExpiry ?? calc.isNearExpiry ?? false,
      discountPercent: ev.discountPercent ?? calc.discountPercent ?? 0,
    };
  }, [product]);

  useEffect(() => {
    fetchFilters();
  }, []);

  useEffect(() => {
    fetchProduct();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  const fetchFilters = async () => {
    try {
      const [catRes, locRes] = await Promise.all([
        axiosInstance.get("/category"),
        axiosInstance.get("/locations"),
      ]);
      setCategories(catRes.data || []);
      setLocations(locRes.data || []);
    } catch (err) {
      console.error("L·ªói l·∫•y danh m·ª•c/ƒë·ªãa ƒëi·ªÉm:", err);
    }
  };

  const fetchProduct = async () => {
    try {
      setLoading(true);
      const res = await axiosInstance.get(`/product/${id}`);
      const data = res.data;
      
      // ‚úÖ Debug: Log variants tr∆∞·ªõc khi set state
      console.log("üîÑ [Frontend] Fetched product variants:", data.variants?.map(v => ({
        _id: v._id,
        weight: v.attributes?.weight,
        ripeness: v.attributes?.ripeness,
        price: v.price,
        stock: v.stock
      })));
      
      setProduct(data);

      // ---- map Expiry t·ª´ server v√†o form ----
      const e = data?.expiry || {};
      const hasExpire = !!(e.expireDate || e.expiryDate);
      const ed = hasExpire ? e.expireDate || e.expiryDate : null;

      setEnableExpiry(Boolean(hasExpire || e.mfgDate || e.shelfLifeDays != null || e.discountNearExpiry));

      setExpireDate(isoToDateInput(ed));
      setMfgDate(isoToDateInput(e.mfgDate));
      setShelfLifeDays(
        e.shelfLifeDays == null || Number.isNaN(Number(e.shelfLifeDays)) ? "" : String(e.shelfLifeDays)
      );

      const dne = e.discountNearExpiry || {};
      const legacyActive = typeof e.enabled === "boolean" ? e.enabled : undefined;
      const legacyThreshold = Number.isFinite(Number(e.nearExpiryDays)) ? Number(e.nearExpiryDays) : undefined;
      const legacyPercent = Number.isFinite(Number(e.discountPercent)) ? Number(e.discountPercent) : undefined;

      setNearActive(typeof dne.active === "boolean" ? dne.active : legacyActive ?? false);
      setThresholdDays(
        Number.isFinite(Number(dne.thresholdDays))
          ? Number(dne.thresholdDays)
          : legacyThreshold ?? 0
      );
      setDiscountPercent(
        Number.isFinite(Number(dne.percent)) ? Number(dne.percent) : legacyPercent ?? 0
      );
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", err);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin chung
  const handleSaveGeneral = async () => {
    try {
      await axiosInstance.put(`/product/${id}`, {
        name: product.name,
        description: product.description,
        image: product.image,
        category: product.category?._id || product.category,
        location: product.location?._id || product.location,
      });
      alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin chung:", err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m");
    }
  };

  // ‚úÖ Upload ·∫£nh nhanh (gi·ªØ path nh∆∞ c√°c trang kh√°c)
  const handleImageUpload = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    const formData = new FormData();
    formData.append("image", file);
    try {
      const res = await axiosInstance.post("/upload", formData);
      const imagePath = res.data?.imagePath || res.data?.url;
      if (!imagePath) throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë∆∞·ªùng d·∫´n ·∫£nh");
      setProduct((prev) => ({ ...prev, image: imagePath }));
    } catch (err) {
      console.error("Upload ·∫£nh l·ªói:", err);
      alert("Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n.");
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t BaseVariant / Variant
  const handleSaveVariant = async (variantId, updatedData) => {
    try {
      if (updatedData.isBase) {
        await axiosInstance.put(`/product/${id}`, {
          baseVariant: {
            ...product.baseVariant,
            price: Number(updatedData.price) || 0,
            stock: Number(updatedData.stock) || 0,
          },
        });
      } else {
        // ‚úÖ T√¨m variant hi·ªán t·∫°i ƒë·ªÉ l·∫•y attributes v√† debug
        const currentVariant = product.variants.find(v => v._id === variantId);
        if (!currentVariant) {
          alert("‚ùå Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ");
          return;
        }

        console.log("üîç Debug variant update:", {
          variantId,
          currentVariant: {
            weight: currentVariant.attributes?.weight,
            ripeness: currentVariant.attributes?.ripeness,
            price: currentVariant.price,
            stock: currentVariant.stock
          },
          updatedData
        });

        const updatePayload = {
          price: Number(updatedData.price) || 0,
          stock: Number(updatedData.stock) || 0,
          // ‚úÖ G·ª≠i k√®m attributes ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã ghi ƒë√®
          attributes: {
            weight: currentVariant.attributes?.weight || "",
            ripeness: currentVariant.attributes?.ripeness || "",
            ...currentVariant.attributes
          }
        };
        
        console.log("üöÄ [Frontend] Sending API request:", {
          url: `/product/${id}/variant/${variantId}`,
          payload: updatePayload
        });
        
        await axiosInstance.put(`/product/${id}/variant/${variantId}`, updatePayload);
      }
      alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t:", err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t");
    }
  };

  // ‚úÖ Xo√° BaseVariant
  const handleDeleteBaseVariant = async () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a BaseVariant n√†y?")) return;
    try {
      await axiosInstance.put(`/product/${id}`, { baseVariant: null });
      alert("üóëÔ∏è X√≥a BaseVariant th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói x√≥a BaseVariant:", err);
      alert("‚ùå L·ªói khi x√≥a BaseVariant");
    }
  };

  // ‚úÖ Xo√° Variant
  const handleDeleteVariant = async (variantId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a bi·∫øn th·ªÉ n√†y?")) return;
    try {
      await axiosInstance.delete(`/product/${id}/variant/${variantId}`);
      alert("üóëÔ∏è X√≥a bi·∫øn th·ªÉ th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói x√≥a bi·∫øn th·ªÉ:", err);
      alert("‚ùå L·ªói khi x√≥a bi·∫øn th·ªÉ");
    }
  };

  // ‚úÖ L∆∞u c·∫•u h√¨nh H·∫°n s·ª≠ d·ª•ng & Gi·∫£m gi√° c·∫≠n h·∫°n
  const handleSaveExpiry = async () => {
    try {
      let expiryPayload = undefined;

      if (enableExpiry) {
        // ∆Øu ti√™n expireDate n·∫øu c√≥
        if (expireDate) {
          expiryPayload = {
            expireDate: toISOorNull(expireDate),
            discountNearExpiry: {
              active: !!nearActive,
              thresholdDays: Number(thresholdDays) || 0,
              percent: Number(discountPercent) || 0,
            },
          };
        } else if (mfgDate || shelfLifeDays !== "") {
          expiryPayload = {
            mfgDate: toISOorNull(mfgDate),
            shelfLifeDays:
              shelfLifeDays === "" ? null : Math.max(0, Number(shelfLifeDays) || 0),
            discountNearExpiry: {
              active: !!nearActive,
              thresholdDays: Number(thresholdDays) || 0,
              percent: Number(discountPercent) || 0,
            },
          };
        } else {
          // b·∫≠t m√† kh√¥ng nh·∫≠p g√¨ -> ch·ªâ l∆∞u discountNearExpiry (n·∫øu c·∫ßn)
          expiryPayload = {
            discountNearExpiry: {
              active: !!nearActive,
              thresholdDays: Number(thresholdDays) || 0,
              percent: Number(discountPercent) || 0,
            },
          };
        }
      } else {
        // mu·ªën t·∫Øt/ xo√° h·∫≥n c·∫•u h√¨nh h·∫°n s·ª≠ d·ª•ng
        expiryPayload = null;
      }

      await axiosInstance.put(`/product/${id}`, { expiry: expiryPayload });
      alert("‚úÖ C·∫≠p nh·∫≠t h·∫°n s·ª≠ d·ª•ng / gi·∫£m gi√° c·∫≠n h·∫°n th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói l∆∞u expiry:", err?.response?.data || err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t h·∫°n s·ª≠ d·ª•ng");
    }
  };

  if (loading) return <p>ƒêang t·∫£i...</p>;
  if (!product) return <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</p>;

  return (
    <div className="max-w-5xl mx-auto p-6 bg-white shadow rounded-lg">
      {/* N√∫t quay l·∫°i */}
      <button
        onClick={() => navigate(-1)}
        className="mb-4 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
      >
        ‚¨Ö Quay l·∫°i
      </button>

      {/* Th√¥ng tin chung */}
      <h2 className="text-xl font-bold mb-2">Th√¥ng tin chung</h2>
      <div className="space-y-3 mb-6">
        <input
          type="text"
          value={product.name || ""}
          onChange={(e) => setProduct({ ...product, name: e.target.value })}
          className="border px-3 py-2 w-full rounded"
          placeholder="T√™n s·∫£n ph·∫©m"
        />
        <textarea
          value={product.description || ""}
          onChange={(e) => setProduct({ ...product, description: e.target.value })}
          className="border px-3 py-2 w-full rounded"
          placeholder="M√¥ t·∫£ s·∫£n ph·∫©m"
        />

        {/* ·∫¢nh + upload nhanh */}
        <div className="grid grid-cols-1 md:grid-cols-[1fr_auto] gap-3 items-center">
          <input
            type="text"
            value={product.image || ""}
            onChange={(e) => setProduct({ ...product, image: e.target.value })}
            className="border px-3 py-2 w-full rounded"
            placeholder="URL ·∫£nh ho·∫∑c path t·ª´ /upload"
          />
          <label className="inline-block">
            <input type="file" accept="image/*" onChange={handleImageUpload} className="hidden" />
            <span className="bg-emerald-600 text-white px-4 py-2 rounded cursor-pointer inline-block">
              T·∫£i ·∫£nh
            </span>
          </label>
        </div>

        {/* Danh m·ª•c & ƒë·ªãa ƒëi·ªÉm */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          <select
            value={product.category?._id || product.category || ""}
            onChange={(e) =>
              setProduct({ ...product, category: e.target.value })
            }
            className="border px-3 py-2 w-full rounded"
          >
            <option value="">-- Ch·ªçn danh m·ª•c --</option>
            {categories.map((c) => (
              <option key={c._id} value={c._id}>{c.name}</option>
            ))}
          </select>

          <select
            value={product.location?._id || product.location || ""}
            onChange={(e) =>
              setProduct({ ...product, location: e.target.value })
            }
            className="border px-3 py-2 w-full rounded"
          >
            <option value="">-- Ch·ªçn ƒë·ªãa ƒëi·ªÉm --</option>
            {locations.map((l) => (
              <option key={l._id} value={l._id}>{l.name}</option>
            ))}
          </select>
        </div>

        <button
          onClick={handleSaveGeneral}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          üíæ L∆∞u th√¥ng tin chung
        </button>
      </div>

      {/* ====== H·∫†N S·ª¨ D·ª§NG & GI·∫¢M GI√Å C·∫¨N H·∫†N ====== */}
      <h2 className="text-xl font-bold mt-6 mb-2">üçè H·∫°n s·ª≠ d·ª•ng & Gi·∫£m gi√° c·∫≠n h·∫°n</h2>

      {/* Xem nhanh tr·∫°ng th√°i hi·ªán t·∫°i */}
      {expiryView && (
        <div className={`mb-3 p-3 rounded border ${
          expiryView.isNearExpiry
            ? "bg-amber-50 border-amber-200 text-amber-800"
            : "bg-gray-50 border-gray-200 text-gray-700"
        }`}>
          <div className="font-semibold">T√¨nh tr·∫°ng hi·ªán t·∫°i</div>
          <div>
            HSD: <b>{expiryView.expireAt ? new Date(expiryView.expireAt).toLocaleDateString() : "‚Äî"}</b>
            {typeof expiryView.daysLeft === "number" && (
              <span>
                {" "}‚Äî {expiryView.daysLeft >= 0 ? `c√≤n ${expiryView.daysLeft} ng√†y` : `qu√° h·∫°n ${Math.abs(expiryView.daysLeft)} ng√†y`}
              </span>
            )}
          </div>
          {expiryView.isNearExpiry && expiryView.discountPercent > 0 && (
            <div>ƒêang √°p d·ª•ng gi·∫£m gi√° c·∫≠n h·∫°n: <b>-{expiryView.discountPercent}%</b></div>
          )}
        </div>
      )}

      <label className="flex items-center gap-2 mb-3">
        <input
          type="checkbox"
          checked={enableExpiry}
          onChange={(e) => setEnableExpiry(e.target.checked)}
        />
        B·∫≠t theo d√µi h·∫°n s·ª≠ d·ª•ng / c·∫•u h√¨nh gi·∫£m gi√° c·∫≠n h·∫°n
      </label>

      {enableExpiry && (
        <div className="space-y-4">
          {/* ExpireDate ho·∫∑c MFG + shelfLifeDays */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <label className="block text-sm text-gray-600 mb-1">Ng√†y h·∫øt h·∫°n (expireDate)</label>
              <input
                type="date"
                className="border px-3 py-2 rounded w-full"
                value={expireDate}
                onChange={(e) => {
                  setExpireDate(e.target.value);
                  if (e.target.value) { // c√≥ expireDate th√¨ kho√° MFG/Shelf
                    setMfgDate("");
                    setShelfLifeDays("");
                  }
                }}
              />
              <p className="text-xs text-gray-500 mt-1">N·∫øu nh·∫≠p ng√†y h·∫øt h·∫°n, h·ªá th·ªëng ∆∞u ti√™n d√πng gi√° tr·ªã n√†y.</p>
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">Ng√†y s·∫£n xu·∫•t (mfgDate)</label>
              <input
                type="date"
                className="border px-3 py-2 rounded w-full"
                value={mfgDate}
                onChange={(e) => setMfgDate(e.target.value)}
                disabled={!!expireDate}
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">S·ªë ng√†y s·ª≠ d·ª•ng (shelfLifeDays)</label>
              <input
                type="number"
                min="0"
                className="border px-3 py-2 rounded w-full"
                value={shelfLifeDays}
                onChange={(e) => setShelfLifeDays(e.target.value)}
                disabled={!!expireDate}
              />
            </div>
          </div>

          {/* DiscountNearExpiry */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 items-end">
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={nearActive}
                onChange={(e) => setNearActive(e.target.checked)}
              />
              K√≠ch ho·∫°t gi·∫£m gi√° c·∫≠n h·∫°n
            </label>

            <div>
              <label className="block text-sm text-gray-600 mb-1">Ng∆∞·ª°ng c·∫≠n h·∫°n (ng√†y)</label>
              <input
                type="number"
                min="0"
                className="border px-3 py-2 rounded w-full"
                value={thresholdDays}
                onChange={(e) => setThresholdDays(e.target.value)}
                disabled={!nearActive}
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">% gi·∫£m khi c·∫≠n h·∫°n</label>
              <input
                type="number"
                min="0"
                max="100"
                className="border px-3 py-2 rounded w-full"
                value={discountPercent}
                onChange={(e) => setDiscountPercent(e.target.value)}
                disabled={!nearActive}
              />
            </div>
          </div>

          <div className="flex gap-3">
            <button
              onClick={handleSaveExpiry}
              className="bg-emerald-600 text-white px-4 py-2 rounded hover:bg-emerald-700"
            >
              üíæ L∆∞u c·∫•u h√¨nh h·∫°n s·ª≠ d·ª•ng
            </button>
            <button
              onClick={async () => {
                if (!window.confirm("Xo√° to√†n b·ªô c·∫•u h√¨nh h·∫°n s·ª≠ d·ª•ng c·ªßa s·∫£n ph·∫©m?")) return;
                try {
                  await axiosInstance.put(`/product/${id}`, { expiry: null });
                  alert("üóëÔ∏è ƒê√£ xo√° h·∫°n s·ª≠ d·ª•ng s·∫£n ph·∫©m");
                  fetchProduct();
                } catch (err) {
                  console.error(err);
                  alert("Kh√¥ng xo√° ƒë∆∞·ª£c h·∫°n s·ª≠ d·ª•ng.");
                }
              }}
              className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              Xo√° c·∫•u h√¨nh h·∫°n s·ª≠ d·ª•ng
            </button>
          </div>
        </div>
      )}

      {/* ====== Base Variant ====== */}
      {product.baseVariant && (
        <>
          <h2 className="text-xl font-semibold mt-8 mb-2">Base Variant</h2>
          <div className="border p-4 rounded mb-4 flex flex-wrap items-center gap-3">
            <span className="px-2 py-1 bg-gray-100 rounded">
              {product.baseVariant?.attributes?.weight} ‚Ä¢ {product.baseVariant?.attributes?.ripeness}
            </span>
            <input
              type="number"
              min={0}
              value={product.baseVariant.price || 0}
              onChange={(e) =>
                setProduct({
                  ...product,
                  baseVariant: {
                    ...product.baseVariant,
                    price: Number(e.target.value),
                  },
                })
              }
              className="border px-2 py-1 w-28 rounded"
            />
            <input
              type="number"
              min={0}
              value={product.baseVariant.stock || 0}
              onChange={(e) =>
                setProduct({
                  ...product,
                  baseVariant: {
                    ...product.baseVariant,
                    stock: Number(e.target.value),
                  },
                })
              }
              className="border px-2 py-1 w-24 rounded"
            />
            <button
              className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
              onClick={() =>
                handleSaveVariant(null, {
                  price: product.baseVariant.price,
                  stock: product.baseVariant.stock,
                  isBase: true,
                })
              }
            >
              L∆∞u
            </button>
            <button
              className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
              onClick={handleDeleteBaseVariant}
            >
              X√≥a
            </button>
          </div>
        </>
      )}

      {/* ====== Variants ====== */}
      <h2 className="text-xl font-semibold mt-6 mb-2">Danh s√°ch bi·∫øn th·ªÉ</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full border">
          <thead>
            <tr className="bg-gray-100">
              <th className="border p-2">Kh·ªëi l∆∞·ª£ng</th>
              <th className="border p-2">T√¨nh tr·∫°ng</th>
              <th className="border p-2">Gi√°</th>
              <th className="border p-2">T·ªìn kho</th>
              <th className="border p-2">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {product.variants?.map((v) => (
              <tr key={v._id}>
                <td className="border p-2">{v.attributes?.weight}</td>
                <td className="border p-2">{v.attributes?.ripeness}</td>
                <td className="border p-2">
                  <input
                    type="number"
                    min={0}
                    value={v.price || 0}
                    onChange={(e) => {
                      console.log("üîç [Frontend] Updating price for variant:", {
                        targetId: v._id,
                        targetWeight: v.attributes?.weight,
                        targetRipeness: v.attributes?.ripeness,
                        newPrice: e.target.value
                      });
                      setProduct((prev) => ({
                        ...prev,
                        variants: prev.variants.map((item) => {
                          const isMatch = item._id.toString() === v._id.toString();
                          if (isMatch) {
                            console.log("‚úÖ [Frontend] Found matching variant for price update:", {
                              itemId: item._id,
                              itemWeight: item.attributes?.weight,
                              itemRipeness: item.attributes?.ripeness
                            });
                          }
                          return isMatch ? { ...item, price: Number(e.target.value) } : item;
                        }),
                      }));
                    }}
                    className="border px-2 py-1 w-28 rounded"
                  />
                </td>
                <td className="border p-2">
                  <input
                    type="number"
                    min={0}
                    value={v.stock || 0}
                    onChange={(e) => {
                      console.log("üîç [Frontend] Updating stock for variant:", {
                        targetId: v._id,
                        targetWeight: v.attributes?.weight,
                        targetRipeness: v.attributes?.ripeness,
                        newStock: e.target.value
                      });
                      setProduct((prev) => ({
                        ...prev,
                        variants: prev.variants.map((item) => {
                          const isMatch = item._id.toString() === v._id.toString();
                          if (isMatch) {
                            console.log("‚úÖ [Frontend] Found matching variant for stock update:", {
                              itemId: item._id,
                              itemWeight: item.attributes?.weight,
                              itemRipeness: item.attributes?.ripeness
                            });
                          }
                          return isMatch ? { ...item, stock: Number(e.target.value) } : item;
                        }),
                      }));
                    }}
                    className="border px-2 py-1 w-24 rounded"
                  />
                </td>
                <td className="border p-2 space-x-2">
                  <button
                    className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                    onClick={() => handleSaveVariant(v._id, { price: v.price, stock: v.stock })}
                  >
                    L∆∞u
                  </button>
                  <button
                    className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                    onClick={() => handleDeleteVariant(v._id)}
                  >
                    X√≥a
                  </button>
                </td>
              </tr>
            ))}
            {(!product.variants || product.variants.length === 0) && (
              <tr>
                <td colSpan={5} className="text-center text-gray-500 p-4">
                  Ch∆∞a c√≥ bi·∫øn th·ªÉ n√†o.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
