import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axiosInstance from "../../../utils/axiosConfig";

export default function Detail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchProduct();
  }, [id]);

  const fetchProduct = async () => {
    try {
      const res = await axiosInstance.get(`/product/${id}`);
      setProduct(res.data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", err);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin chung s·∫£n ph·∫©m
  const handleSaveGeneral = async () => {
    try {
      await axiosInstance.put(`/product/${id}`, {
        name: product.name,
        description: product.description,
        image: product.image
      });
      alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin chung:", err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m");
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t BaseVariant ho·∫∑c Variant
  const handleSaveVariant = async (variantId, updatedData) => {
    try {
      if (updatedData.isBase) {
        await axiosInstance.put(`/product/${id}`, {
          baseVariant: {
            ...product.baseVariant,
            price: updatedData.price,
            stock: updatedData.stock
          }
        });
      } else {
        await axiosInstance.put(`/product/${id}/variant/${variantId}`, updatedData);
      }
      alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t:", err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t");
    }
  };

  // ‚úÖ X√≥a BaseVariant
  const handleDeleteBaseVariant = async () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a BaseVariant n√†y?")) return;
    try {
      await axiosInstance.put(`/product/${id}`, { baseVariant: null });
      alert("üóëÔ∏è X√≥a BaseVariant th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói x√≥a BaseVariant:", err);
      alert("‚ùå L·ªói khi x√≥a BaseVariant");
    }
  };

  // ‚úÖ X√≥a Variant
  const handleDeleteVariant = async (variantId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a bi·∫øn th·ªÉ n√†y?")) return;
    try {
      await axiosInstance.delete(`/product/${id}/variant/${variantId}`);
      alert("üóëÔ∏è X√≥a bi·∫øn th·ªÉ th√†nh c√¥ng");
      fetchProduct();
    } catch (err) {
      console.error("L·ªói x√≥a bi·∫øn th·ªÉ:", err);
      alert("‚ùå L·ªói khi x√≥a bi·∫øn th·ªÉ");
    }
  };

  if (loading) return <p>ƒêang t·∫£i...</p>;
  if (!product) return <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</p>;

  return (
    <div className="max-w-5xl mx-auto p-6 bg-white shadow rounded-lg">
      {/* N√∫t quay l·∫°i */}
      <button
        onClick={() => navigate(-1)}
        className="mb-4 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
      >
        ‚¨Ö Quay l·∫°i
      </button>

      {/* Form th√¥ng tin chung */}
      <h2 className="text-xl font-bold mb-2">Th√¥ng tin chung</h2>
      <div className="space-y-2 mb-4">
        <input
          type="text"
          value={product.name}
          onChange={(e) => setProduct({ ...product, name: e.target.value })}
          className="border px-3 py-1 w-full"
          placeholder="T√™n s·∫£n ph·∫©m"
        />
        <textarea
          value={product.description}
          onChange={(e) => setProduct({ ...product, description: e.target.value })}
          className="border px-3 py-1 w-full"
          placeholder="M√¥ t·∫£ s·∫£n ph·∫©m"
        />
        <input
          type="text"
          value={product.image}
          onChange={(e) => setProduct({ ...product, image: e.target.value })}
          className="border px-3 py-1 w-full"
          placeholder="URL ·∫£nh"
        />
        <button
          onClick={handleSaveGeneral}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          üíæ L∆∞u th√¥ng tin chung
        </button>
      </div>

      {/* Base Variant */}
      {product.baseVariant && (
        <>
          <h2 className="text-xl font-semibold mt-6 mb-2">Base Variant</h2>
          <div className="border p-4 rounded mb-4 flex items-center space-x-4">
            <span>{product.baseVariant.attributes.weight} - {product.baseVariant.attributes.ripeness}</span>
            <input
              type="number"
              min={0}
              value={product.baseVariant.price}
              onChange={(e) =>
                setProduct({
                  ...product,
                  baseVariant: {
                    ...product.baseVariant,
                    price: Number(e.target.value)
                  }
                })
              }
              className="border px-2 py-1 w-24"
            />
            <input
              type="number"
              min={0}
              value={product.baseVariant.stock}
              onChange={(e) =>
                setProduct({
                  ...product,
                  baseVariant: {
                    ...product.baseVariant,
                    stock: Number(e.target.value)
                  }
                })
              }
              className="border px-2 py-1 w-20"
            />
            <button
              className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
              onClick={() =>
                handleSaveVariant(null, {
                  price: product.baseVariant.price,
                  stock: product.baseVariant.stock,
                  isBase: true
                })
              }
            >
              L∆∞u
            </button>
            <button
              className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
              onClick={handleDeleteBaseVariant}
            >
              X√≥a
            </button>
          </div>
        </>
      )}

      {/* Variants */}
      <h2 className="text-xl font-semibold mt-6 mb-2">Danh s√°ch bi·∫øn th·ªÉ</h2>
      <table className="w-full border">
        <thead>
          <tr className="bg-gray-100">
            <th className="border p-2">Kh·ªëi l∆∞·ª£ng</th>
            <th className="border p-2">T√¨nh tr·∫°ng</th>
            <th className="border p-2">Gi√°</th>
            <th className="border p-2">T·ªìn kho</th>
            <th className="border p-2">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {product.variants.map((v) => (
            <tr key={v._id}>
              <td className="border p-2">{v.attributes.weight}</td>
              <td className="border p-2">{v.attributes.ripeness}</td>
              <td className="border p-2">
                <input
                  type="number"
                  min={0}
                  value={v.price}
                  onChange={(e) =>
                    setProduct((prev) => ({
                      ...prev,
                      variants: prev.variants.map((item) =>
                        item._id === v._id
                          ? { ...item, price: Number(e.target.value) }
                          : item
                      )
                    }))
                  }
                  className="border px-2 py-1 w-24"
                />
              </td>
              <td className="border p-2">
                <input
                  type="number"
                  min={0}
                  value={v.stock}
                  onChange={(e) =>
                    setProduct((prev) => ({
                      ...prev,
                      variants: prev.variants.map((item) =>
                        item._id === v._id
                          ? { ...item, stock: Number(e.target.value) }
                          : item
                      )
                    }))
                  }
                  className="border px-2 py-1 w-20"
                />
              </td>
              <td className="border p-2 space-x-2">
                <button
                  className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
                  onClick={() =>
                    handleSaveVariant(v._id, { price: v.price, stock: v.stock })
                  }
                >
                  L∆∞u
                </button>
                <button
                  className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                  onClick={() => handleDeleteVariant(v._id)}
                >
                  X√≥a
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
