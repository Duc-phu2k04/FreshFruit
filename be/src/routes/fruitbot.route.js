import express from "express";
import Product from "../models/product.model.js";
import { BOT_CONFIG } from "../config/botConfig.js";
// N·∫øu Node < 18, b·ªè comment d√≤ng d∆∞·ªõi v√† c√†i: npm i node-fetch
// import fetch from "node-fetch";

export const fruitbotRouter = express.Router();

/* ========== Enrich product t·ª´ DB + BOT_CONFIG (ph√¢n bi·ªát t·ªìn kho theo variant) ========== */
function enrichProduct(p) {
  const extra = BOT_CONFIG[p.name] || {};

  // ∆Øu ti√™n displayVariant n·∫øu c√≥ & c√≤n h√†ng
  const dv = p.displayVariant && typeof p.displayVariant === "object" ? p.displayVariant : null;
  const dvInStock = dv && Number(dv.stock) > 0;

  // Chu·∫©n h√≥a danh s√°ch variants
  const variants = Array.isArray(p.variants)
    ? p.variants.map((v) => ({
        weight: v?.attributes?.weight,
        ripeness: v?.attributes?.ripeness,
        price: Number(v?.price ?? 0),
        stock: Number(v?.stock ?? 0),
      }))
    : [];

  // Bi·∫øn th·ªÉ r·∫ª nh·∫•t c√≤n h√†ng
  const inStockVariants = variants.filter((v) => v.stock > 0).sort((a, b) => a.price - b.price);
  const cheapestInStock = inStockVariants[0] || null;

  // Fallback:
  // 1) displayVariant c√≤n h√†ng
  // 2) bi·∫øn th·ªÉ r·∫ª nh·∫•t c√≤n h√†ng
  // 3) baseVariant (n·∫øu c√≥)
  // 4) "·∫£o" 0 gi√°/0 t·ªìn
  const chosen =
    (dvInStock && {
      price: Number(dv.price || 0),
      stock: Number(dv.stock || 0),
      weight: dv.attributes?.weight,
      ripeness: dv.attributes?.ripeness,
    }) ||
    cheapestInStock ||
    (p.baseVariant
      ? {
          price: Number(p.baseVariant.price || 0),
          stock: Number(p.baseVariant.stock || 0),
          weight: p.baseVariant.attributes?.weight,
          ripeness: p.baseVariant.attributes?.ripeness,
        }
      : { price: 0, stock: 0 });

  return {
    id: p._id?.toString(),
    name: p.name,
    origin: "Vi·ªát Nam", // c√≥ th·ªÉ map t·ª´ location n·∫øu c·∫ßn
    price: chosen.price,
    stock: chosen.stock,
    variant: {
      weight: chosen.weight,
      ripeness: chosen.ripeness,
    },
    variants, // l∆∞u ƒë·ªÉ ch·ªçn theo ng√¢n s√°ch n·∫øu c·∫ßn
    ...extra, // taste, season, seedless, peelEase, useTags
  };
}

/* ========== FAQ tƒ©nh c∆° b·∫£n ========== */
const FAQ = [
  { q: ["thanh to√°n", "payment", "tr·∫£ ti·ªÅn"], a: "H·ªó tr·ª£ COD khi nh·∫≠n h√†ng ho·∫∑c chuy·ªÉn kho·∫£n." },
  { q: ["freeship", "mi·ªÖn ph√≠"], a: "ƒê∆°n t·ª´ 300k s·∫Ω freeship n·ªôi th√†nh." },
];
function matchFAQ(msg) {
  const t = (msg || "").toLowerCase();
  for (const f of FAQ) if (f.q.some((k) => t.includes(k))) return f.a;
  return null;
}

/* ========== Rule ph√≠ ship (ƒë·ªông) ========== */
/**
 * - N·ªôi th√†nh: 30k
 * - Ngo·∫°i th√†nh: 45k
 * - C√πng ph∆∞·ªùng v·ªõi c∆° s·ªü: freeship
 * C·∫•u h√¨nh ph∆∞·ªùng c∆° s·ªü qua .env: STORE_WARD="Ph∆∞·ªùng 12"
 */
const STORE_WARD = (process.env.STORE_WARD || "").toLowerCase();

function detectShippingIntent(text) {
  const t = (text || "").toLowerCase();
  // c√°c c·ª•m t·ª´ th·ªÉ hi·ªán h·ªèi ph√≠ ship
  const isAsk = /(ph√≠\s*ship|ti·ªÅn\s*ship|ship\s*bao\s*nhieu|ship\s*bn|v·∫≠n\s*chuy·ªÉn|giao\s*h√†ng|ship\s*nhanh)/.test(
    t
  );
  if (!isAsk) return null;

  // x√°c ƒë·ªãnh ph·∫°m vi
  const sameWard = STORE_WARD && t.includes("ph∆∞·ªùng") && t.includes(STORE_WARD);

  const isInner = /(n·ªôi\s*th√†nh|trong\s*th√†nh\s*ph·ªë|inner\s*city)/.test(t);
  const isOuter = /(ngo·∫°i\s*th√†nh|ngo√†i\s*th√†nh\s*ph·ªë|outer)/.test(t);

  return { sameWard, isInner, isOuter };
}

function shippingReplyByScope({ sameWard, isInner, isOuter }) {
  if (sameWard) return "B·∫°n c√πng ph∆∞·ªùng v·ªõi c∆° s·ªü n√™n **freeship** nh√© üéâ";
  if (isInner) return "Ph√≠ ship **n·ªôi th√†nh** l√† **30.000ƒë**.";
  if (isOuter) return "Ph√≠ ship **ngo·∫°i th√†nh** l√† **45.000ƒë**.";
  // n·∫øu kh√¥ng r√µ ph·∫°m vi, tr·∫£ l·ªùi guideline + g·ª£i √Ω cung c·∫•p ph∆∞·ªùng
  return `Ph√≠ ship: **n·ªôi th√†nh 30.000ƒë**, **ngo·∫°i th√†nh 45.000ƒë**.
N·∫øu b·∫°n cho m√¨nh bi·∫øt **ph∆∞·ªùng** (v√≠ d·ª•: ‚ÄúPh∆∞·ªùng 12‚Äù), v√† n·∫øu **c√πng ph∆∞·ªùng** v·ªõi c∆° s·ªü th√¨ s·∫Ω **freeship** nh√©.`;
}

/* ========== Helpers t∆∞ v·∫•n (rule-based) ========== */
function inSeason(p, m = new Date().getMonth() + 1) {
  return p.season?.includes(m);
}
function parseBudgetVND(text) {
  if (!text) return null;
  const t = text.toLowerCase().replace(/\./g, "").replace(/k\b/g, "000").replace(/tri·ªáu/g, "000000");
  const m = t.match(/(\d{3,7})\s*(vnƒë|vnd|ƒë|dong|ƒë·ªìng)?/);
  return m ? parseInt(m[1], 10) : null;
}
function extractPrefs(msg) {
  const t = (msg || "").toLowerCase();
  return {
    wantSweet: /(ng·ªçt|√≠t chua)/.test(t),
    wantSour: /(chua|thanh)/.test(t),
    wantCrisp: /(gi√≤n)/.test(t),
    wantSeedless: /(kh√¥ng h·∫°t|√≠t h·∫°t)/.test(t),
    wantEasyPeel: /(d·ªÖ g·ªçt|v·ªè m·ªèng|d·ªÖ b√≥c)/.test(t),
    budget: parseBudgetVND(t),
    useJuice: /(√©p|n∆∞·ªõc √©p)/.test(t),
    useBaby: /(cho b√©|tr·∫ª nh·ªè)/.test(t),
    useGift: /(bi·∫øu|t·∫∑ng|qu√†)/.test(t),
  };
}

// Ch·ªçn bi·∫øn th·ªÉ s√°t ng√¢n s√°ch nh·∫•t nh∆∞ng c√≤n h√†ng
function pickVariantByBudget(product, budget) {
  if (!budget || !Array.isArray(product.variants) || !product.variants.length) return null;
  const inStock = product.variants.filter((v) => v.stock > 0);
  if (!inStock.length) return null;
  const sorted = inStock
    .map((v) => ({ v, diff: Math.abs(v.price - budget) }))
    .sort((a, b) => a.diff - b.diff);
  return sorted[0].v;
}

/* ===== Tuning rule ===== */
const MIN_SCORE_TO_RECOMMEND = 4; // ng∆∞·ª°ng t·ªëi thi·ªÉu ƒë·ªÉ show s·∫£n ph·∫©m
const MIN_SIGNALS_TO_RECOMMEND = 2; // c·∫ßn ‚â•2 t√≠n hi·ªáu ngo√†i ng√¢n s√°ch

function countSignals(f) {
  let n = 0;
  if (f.wantSweet) n++;
  if (f.wantSour) n++;
  if (f.wantCrisp) n++;
  if (f.wantSeedless) n++;
  if (f.wantEasyPeel) n++;
  if (f.useJuice) n++;
  if (f.useBaby) n++;
  if (f.useGift) n++;
  return n;
}

function score(p, f) {
  // n·∫øu kh√¥ng c√≤n bi·∫øn th·ªÉ n√†o > 0 ‚Üí lo·∫°i s·ªõm
  const anyInStock =
    (p.stock > 0) || (Array.isArray(p.variants) && p.variants.some((v) => v.stock > 0));
  if (!anyInStock) return -Infinity;

  let s = 0;

  // v·ªã/texture
  if (f.wantSweet) s += (p.taste?.sweet || 0) * 2;
  if (f.wantSour) s += (p.taste?.sour || 0) * 2;
  if (f.wantCrisp) s += (p.taste?.crisp || 0) * 1.5;

  // thu·ªôc t√≠nh
  if (f.wantSeedless && p.seedless) s += 3;
  if (f.wantEasyPeel && (p.peelEase || 0) >= 4) s += 2;

  // nhu c·∫ßu s·ª≠ d·ª•ng
  if (f.useJuice && p.useTags?.includes("√©p n∆∞·ªõc")) s += 3;
  if (f.useBaby && p.useTags?.includes("cho b√©")) s += 3;
  if (f.useGift && p.useTags?.includes("bi·∫øu t·∫∑ng")) s += 3;

  // ng√¢n s√°ch: CH·ªà c·ªông n·∫øu ƒë√£ c√≥ √≠t nh·∫•t 1 t√≠n hi·ªáu kh√°c
  const nonBudgetSignals =
    f.wantSweet ||
    f.wantSour ||
    f.wantCrisp ||
    f.wantSeedless ||
    f.wantEasyPeel ||
    f.useJuice ||
    f.useBaby ||
    f.useGift;
  if (f.budget && nonBudgetSignals) {
    const basePrice = p.price || 0;
    if (basePrice <= f.budget) s += 1.2;
    const diff = Math.abs(basePrice - f.budget);
    s += Math.max(0, 1.2 - diff / 60000);
  }

  // m√πa v·ª• nh·∫π tay
  if (inSeason(p)) s += 1;

  return s;
}

function reasons(p, f) {
  const r = [];
  if (f.wantSweet && (p.taste?.sweet || 0) >= 4) r.push("ng·ªçt");
  if (f.wantSour && (p.taste?.sour || 0) >= 2) r.push("h∆°i chua thanh");
  if (f.wantCrisp && (p.taste?.crisp || 0) >= 3) r.push("gi√≤n");
  if (f.wantSeedless && p.seedless) r.push("kh√¥ng h·∫°t");
  if (f.wantEasyPeel && (p.peelEase || 0) >= 4) r.push("v·ªè d·ªÖ b√≥c");
  if (f.useJuice && p.useTags?.includes("√©p n∆∞·ªõc")) r.push("h·ª£p √©p n∆∞·ªõc");
  if (f.useBaby && p.useTags?.includes("cho b√©")) r.push("h·ª£p cho b√©");
  if (f.useGift && p.useTags?.includes("bi·∫øu t·∫∑ng")) r.push("ƒë·∫πp ƒë·ªÉ bi·∫øu");
  if (inSeason(p)) r.push("ƒëang m√πa");
  return r.join(", ");
}

/* ========== Ollama (AI offline) ========== */
const OLLAMA_HOST = process.env.OLLAMA_HOST || "http://127.0.0.1:11434";
const OLLAMA_MODEL = process.env.OLLAMA_MODEL || "mistral:7b-instruct";
const OLLAMA_MAX_TOKENS = Number(process.env.OLLAMA_MAX_TOKENS || 512);
const OLLAMA_TEMPERATURE = Number(process.env.OLLAMA_TEMPERATURE || 0.2);

// G·ªçi 1 l·∫ßn
async function callOllamaOnce({
  system,
  user,
  maxTokens = OLLAMA_MAX_TOKENS,
  temperature = OLLAMA_TEMPERATURE,
}) {
  const res = await fetch(`${OLLAMA_HOST}/api/generate`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model: OLLAMA_MODEL,
      prompt: `<s>[SYSTEM]\n${system}\n[/SYSTEM]\n[USER]\n${user}\n[/USER]\n[ASSISTANT]\n`,
      options: { temperature, num_predict: maxTokens },
      stream: false,
    }),
  });
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`Ollama error ${res.status}: ${text}`);
  }
  const data = await res.json();
  return (data.response || "").trim();
}

// N·∫øu c√¢u tr·∫£ l·ªùi b·ªã c·∫Øt (kh√¥ng k·∫øt th√∫c b·∫±ng d·∫•u c√¢u), g·ªçi ti·∫øp ƒë·ªÉ n·ªëi
async function callOllama({ system, user }) {
  const first = await callOllamaOnce({ system, user });
  const trimmed = first.trim();

  if (/[.!?‚Ä¶]\s*$/.test(trimmed)) return trimmed; // ƒë√£ k·∫øt th√∫c

  const continueUser = `${user}\n\nTi·∫øp t·ª•c n·ªët ph·∫ßn c√≤n l·∫°i, t·ªïng k·∫øt g·ªçn 1-2 c√¢u.`;
  const second = await callOllamaOnce({
    system,
    user: continueUser,
    maxTokens: Math.max(128, Math.floor(OLLAMA_MAX_TOKENS / 2)),
  });

  let joined = (trimmed + " " + second).replace(/\s+/g, " ").trim();
  if (!/[.!?‚Ä¶]\s*$/.test(joined)) joined += ".";
  return joined;
}

/* ========== API ch√≠nh (HYBRID) ========== */
fruitbotRouter.post("/chat", async (req, res) => {
  const { message } = req.body || {};
  if (!message) {
    return res.status(400).json({
      reply: "M√¥ t·∫£ nhu c·∫ßu: ng·ªçt/chua, c√≥ c·∫ßn kh√¥ng h·∫°t, ng√¢n s√°ch nh√©!",
    });
  }

  // 0) Ph√≠ ship (∆∞u ti√™n b·∫Øt tr∆∞·ªõc v√¨ l√† rule c·ª• th·ªÉ)
  const shipIntent = detectShippingIntent(message);
  if (shipIntent) {
    return res.json({
      reply: shippingReplyByScope(shipIntent),
      quickReplies: ["Cho m√¨nh h·ªèi lo·∫°i kh√¥ng h·∫°t", "Ng·ªçt ~60k/kg", "Mua ƒë·ªÉ √©p n∆∞·ªõc"],
    });
  }

  // 1) FAQ tƒ©nh
  const faq = matchFAQ(message);
  if (faq) return res.json({ reply: faq });

  // 2) L·∫•y s·∫£n ph·∫©m t·ª´ MongoDB, enrich b·∫±ng BOT_CONFIG
  let PRODUCTS = [];
  try {
    const dbProducts = await Product.find(
      {},
      { name: 1, baseVariant: 1, variants: 1, displayVariant: 1 }
    ).limit(100);
    PRODUCTS = dbProducts.map(enrichProduct);
  } catch (e) {
    console.error("DB error:", e?.message || e);
  }

  // 3) T∆∞ v·∫•n rule-based + gating
  const prefs = extractPrefs(message);

  // Lo·∫°i h√†ng h·∫øt s·∫°ch (kh√¥ng c√≤n bi·∫øn th·ªÉ n√†o > 0)
  const availableProducts = PRODUCTS.filter((p) => {
    const anyInStock =
      p.stock > 0 || (Array.isArray(p.variants) && p.variants.some((v) => v.stock > 0));
    return anyInStock;
  });

  const productsRanked = availableProducts
    .map((p) => ({ p, s: score(p, prefs) }))
    .sort((a, b) => b.s - a.s);

  // ƒêi·ªÅu ki·ªán ƒë·ªÉ recommend theo rule
  const signals = countSignals(prefs);
  const topRanked = productsRanked.filter((x) => x.s >= MIN_SCORE_TO_RECOMMEND).slice(0, 3);

  if (signals >= MIN_SIGNALS_TO_RECOMMEND && topRanked.length > 0) {
    const results = topRanked.map(({ p }) => {
      // N·∫øu c√≥ ng√¢n s√°ch ‚Üí ch·ªçn bi·∫øn th·ªÉ s√°t ng√¢n s√°ch nh·∫•t nh∆∞ng ph·∫£i c√≤n h√†ng
      const vBudget = pickVariantByBudget(p, prefs.budget);
      const price = vBudget ? vBudget.price : p.price;
      const stock = vBudget ? vBudget.stock : p.stock;
      const vLabel = vBudget
        ? [vBudget.weight, vBudget.ripeness].filter(Boolean).join(" ‚Ä¢ ")
        : [p?.variant?.weight, p?.variant?.ripeness].filter(Boolean).join(" ‚Ä¢ ");

      return {
        id: p.id,
        name: p.name,
        price,
        stock,
        origin: p.origin,
        reason: reasons(p, prefs),
        variant: vLabel || undefined,
      };
    });

    const bullet = results
      .map((r) => {
        const v = r.variant ? ` (${r.variant})` : "";
        const stockText = typeof r.stock === "number" ? ` ‚Ä¢ c√≤n ${r.stock}` : "";
        return `‚Ä¢ ${r.name}${v} ~ ${r.price.toLocaleString()}ƒë${stockText} ‚Äî ${r.reason}`;
      })
      .join("\n");

    return res.json({
      reply: `G·ª£i √Ω cho b·∫°n:\n${bullet}\nB·∫°n mu·ªën xem chi ti·∫øt kh√¥ng?`,
      results,
      quickReplies: ["C√≥ lo·∫°i kh√¥ng h·∫°t kh√°c kh√¥ng?", "Kho·∫£ng 60k/kg", "Mua cho b√© ƒÉn"],
    });
  }

  // 4) üî• Fallback sang Ollama
  const sys = `B·∫°n l√† chatbot t∆∞ v·∫•n tr√°i c√¢y cho website b√°n hoa qu·∫£.
- Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, R√ï R√ÄNG: 3‚Äì6 c√¢u, ti·∫øng Vi·ªát.
- Kh√¥ng b·ªãa d·ªØ ki·ªán: ch·ªâ tham chi·∫øu d·ªØ li·ªáu cung c·∫•p (n·∫øu thi·∫øu h√£y n√≥i ch∆∞a c√≥).
- N·∫øu kh√°ch h·ªèi gi√°/kg m√† d·ªØ li·ªáu l√† /0.5kg th√¨ quy ƒë·ªïi t∆∞∆°ng ƒë∆∞∆°ng.
- ∆Øu ti√™n: g·ª£i √Ω 1‚Äì3 l·ª±a ch·ªçn ph√π h·ª£p + l√Ω do ng·∫Øn + t·∫ßm gi√° (n·∫øu c√≥).
D·ªÆ LI·ªÜU THAM CHI·∫æU: ${JSON.stringify(PRODUCTS)}`;

  const userPrompt = `Kh√°ch h·ªèi: "${message}". H√£y t∆∞ v·∫•n ph√π h·ª£p.`;

  try {
    const ai = await callOllama({ system: sys, user: userPrompt });
    return res.json({
      reply: ai,
      quickReplies: ["G·ª£i √Ω theo v·ªã ng·ªçt", "C√≥ lo·∫°i kh√¥ng h·∫°t kh√¥ng?", "T·∫ßm 60k/kg"],
    });
  } catch (e) {
    console.error("Ollama error:", e?.message || e);
    return res.json({
      reply: "AI offline ƒëang b·∫≠n. B·∫°n m√¥ t·∫£ theo: ng·ªçt/chua/kh√¥ng h·∫°t/t·∫ßm gi√° nh√©!",
      quickReplies: ["Ng·ªçt, kh√¥ng h·∫°t", "Kho·∫£ng 60k/kg", "Mua cho b√© ƒÉn"],
    });
  }
});
