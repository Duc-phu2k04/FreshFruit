import * as authService from '../services/auth.service.js';
import bcrypt from 'bcryptjs';
import User from '../models/user.model.js';
import crypto from 'crypto';
import { sendMail } from '../services/mail.service.js';

export const register = async (req, res) => {
  try {
    const { username, email, password, role } = req.body;
    const user = await authService.register(username, email, password, role);
    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng', user });
  } catch (err) {
    res.status(400).json({ error: err.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i' });
  }
};


export const login = async (req, res) => {
  try {
    const { usernameOrEmail, password } = req.body;
    const { token, user } = await authService.login(usernameOrEmail, password);
    res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token, user });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng' });
  }
};


// X√≥a t√†i kho·∫£n theo ID
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedUser = await User.findByIdAndDelete(id);
    if (!deletedUser) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }
    res.json({ message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng', user: deletedUser });
  } catch (err) {
    res.status(500).json({ error: 'L·ªói khi x√≥a ng∆∞·ªùi d√πng' });
  }
};

export const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.' });
    }

    const newPassword = crypto.randomBytes(4).toString('hex'); // 8 k√Ω t·ª± ng·∫´u nhi√™n
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    user.password = hashedPassword;
    await user.save();

    const emailContent = `
Xin ch√†o ${user.username || 'b·∫°n'}, 

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n FreshFruit c·ªßa b·∫°n.

üîë M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†: ${newPassword}

Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u ngay ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n cho t√†i kho·∫£n.

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© FreshFruit
    `;

    await sendMail(
      email,
      'üîê M·∫≠t kh·∫©u m·ªõi t·ª´ h·ªá th·ªëng FreshFruit',
      emailContent
    );

    res.status(200).json({ message: 'M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};
export const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { username, email, role /*, ...any other fields you want to update */ } = req.body;

    const user = await User.findById(id);

    if (!user) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y.' });
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
    if (username) user.username = username;
    if (email) user.email = email;
    // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t vai tr√≤ n·∫øu n√≥ h·ª£p l·ªá v√† c√≥ quy·ªÅn
    if (role && ['user', 'admin'].includes(role)) { // ƒê·∫£m b·∫£o role h·ª£p l·ªá
      // Th√™m logic ki·ªÉm tra quy·ªÅn ·ªü ƒë√¢y n·∫øu b·∫°n kh√¥ng mu·ªën admin t·ª± h·∫° quy·ªÅn ho·∫∑c admin th∆∞·ªùng thay ƒë·ªïi quy·ªÅn c·ªßa super-admin
      user.role = role;
    }

    const updatedUser = await user.save(); // L∆∞u thay ƒë·ªïi

    res.status(200).json({ message: 'Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', data: updatedUser });
  } catch (error) {
    // X·ª≠ l√Ω l·ªói tr√πng email ho·∫∑c l·ªói validation kh√°c
    res.status(400).json({ message: error.message });
  }
};