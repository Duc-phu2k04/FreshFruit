// ‚úÖ controllers/cart.controller.js
import Cart from "../models/cart.model.js";
import Product from "../models/product.model.js";

export const addToCart = async (req, res) => {
  try {
    const userId = req.user._id;
    const { productId, variantId, quantity } = req.body;

    if (!productId || !variantId || quantity === undefined || quantity === null) {
      return res.status(400).json({ message: "Thi·∫øu productId, variantId ho·∫∑c quantity" });
    }

    const parsedQuantity = parseInt(quantity);
    if (isNaN(parsedQuantity) || parsedQuantity <= 0) {
      return res.status(400).json({ message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
    }

    let cart = await Cart.findOne({ user: userId });

    if (!cart) {
      cart = new Cart({ user: userId, items: [] });
    }

    const existingItemIndex = cart.items.findIndex(
      (item) =>
        item.product.toString() === productId &&
        item.variantId.toString() === variantId
    );

    if (existingItemIndex >= 0) {
      cart.items[existingItemIndex].quantity += parsedQuantity;
    } else {
      cart.items.push({ product: productId, variantId, quantity: parsedQuantity });
    }

    await cart.save();
    const updatedCart = await Cart.findOne({ user: userId }).populate("items.product");

    res.status(200).json({ message: "ƒê√£ th√™m v√†o gi·ªè h√†ng", items: updatedCart.items });
  } catch (error) {
    console.error("L·ªói khi th√™m v√†o gi·ªè:", error.message);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const updateCartItem = async (req, res) => {
  try {
    const userId = req.user._id;
    const { productId, variantId, quantity } = req.body;

    const cart = await Cart.findOne({ user: userId });
    if (!cart) return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

    const itemIndex = cart.items.findIndex(
      (item) =>
        item.product.toString() === productId &&
        item.variantId.toString() === variantId
    );

    if (itemIndex === -1) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè" });
    }

    if (quantity > 0) {
      cart.items[itemIndex].quantity = quantity;
    } else {
      cart.items.splice(itemIndex, 1);
    }

    await cart.save();
    const updatedCart = await Cart.findOne({ user: userId }).populate("items.product");

    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", items: updatedCart.items });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error.message);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const getCartByUser = async (req, res) => {
  try {
    const userId = req.user._id;

    const cart = await Cart.findOne({ user: userId }).populate("items.product");

    if (!cart || cart.items.length === 0) {
      return res.status(200).json({ message: "Gi·ªè h√†ng tr·ªëng", items: [] });
    }

    // T√¨m th√¥ng tin variant t∆∞∆°ng ·ª©ng cho t·ª´ng item
    const enrichedItems = cart.items.map((item) => {
      const product = item.product;

      // T√¨m bi·∫øn th·ªÉ kh·ªõp v·ªõi variantId
      const variant = product.variants.find(
        (v) => v._id.toString() === item.variantId.toString()
      );

      return {
        ...item.toObject(),
        variant, // g·∫Øn th√™m th√¥ng tin variant v√†o item
      };
    });

    res.status(200).json({ items: enrichedItems });
  } catch (error) {
    console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error.message);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const removeCartItem = async (req, res) => {
  try {
    const userId = req.user._id;
    const { productId, variantId } = req.params;

    console.log("üü¢ API DELETE CART");
    console.log("üëâ productId t·ª´ FE:", productId);
    console.log("üëâ variantId t·ª´ FE:", variantId);

    const cart = await Cart.findOneAndUpdate(
      { user: userId },
      {
        $pull: {
          items: {
            product: productId,
            variantId: variantId,
          },
        },
      },
      { new: true }
    ).populate("items.product");

    if (!cart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m", items: cart.items });
  } catch (error) {
    console.error("‚ùå L·ªói khi xo√° s·∫£n ph·∫©m:", error);
    res.status(500).json({
      message: "L·ªói server khi xo√° s·∫£n ph·∫©m",
      error: error.message,
    });
  }
};

export const clearCart = async (req, res) => {
  try {
    const userId = req.user._id;

    const cart = await Cart.findOne({ user: userId });
    if (!cart) {
      return res.status(200).json({ message: "Kh√¥ng c√≥ g√¨ ƒë·ªÉ xo√°" });
    }

    cart.items = [];
    await cart.save();

    res.status(200).json({ message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng" });
  } catch (error) {
    console.error("L·ªói khi xo√° to√†n b·ªô gi·ªè h√†ng:", error.message);
    res.status(500).json({ message: "L·ªói server khi xo√° to√†n b·ªô gi·ªè h√†ng", error: error.message });
  }
};
