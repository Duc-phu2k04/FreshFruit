// src/services/order.service.js
import mongoose from "mongoose";
import Order from "../models/order.model.js";
import Voucher from "../models/voucher.model.js";
import Product from "../models/product.model.js";
import Cart from "../models/cart.model.js";
import Address from "../models/address.model.js";
import { quoteShipping } from "./shipping.service.js";
import voucherService from "./voucher.service.js";

// So s√°nh bi·∫øn th·ªÉ theo attributes
const isSameVariantAttr = (a = {}, b = {}) =>
  String(a.weight || "") === String(b.weight || "") &&
  String(a.ripeness || "") === String(b.ripeness || "");

// Ti·ªán √≠ch s·ªë ti·ªÅn
const toMoney = (v) => Math.max(0, Math.round(Number(v || 0)));

/* ===== Helper quy ƒë·ªïi tr·ªçng l∆∞·ª£ng -> kg (ƒë·ªÉ d√πng chung kho 1kg) ===== */
const kgFromWeight = (w) => {
  if (!w) return null;
  const s = String(w).toLowerCase().trim();
  const mKg = s.match(/(\d+(?:[.,]\d+)?)\s*kg/);
  if (mKg) return parseFloat(mKg[1].replace(",", "."));
  const mG = s.match(/(\d+(?:[.,]\d+)?)\s*g/);
  if (mG) return parseFloat(mG[1].replace(",", ".")) / 1000;
  return null;
};

// L·∫•y bi·∫øn th·ªÉ 1kg (n·∫øu c√≥)
const findBase1kgVariant = (p) =>
  (p?.variants || []).find((v) => (kgFromWeight(v?.attributes?.weight) || 0) === 1) || null;

/* ===== ‚ÄúGi√° ∆∞u ti√™n‚Äù legacy cho combo d·ª±a tr√™n product con ===== */
function pickUnitPriceForProduct(p) {
  if (!p) return 0;
  const dv = Number(p?.displayVariant?.price || 0);
  if (dv > 0) return dv;

  const pack = Array.isArray(p?.packagingOptions)
    ? p.packagingOptions.find((x) => Number(x?.price) > 0)
    : null;
  if (pack) return Number(pack.price || 0);

  const v0 = Number(p?.variants?.[0]?.price || 0);
  if (v0 > 0) return v0;

  const base = Number(p?.baseVariant?.price || 0);
  if (base > 0) return base;

  return 0;
}

/**
 * Legacy: t√≠nh gi√° combo t·ª´ product type combo/mix n·∫øu DB c√≥ c·∫•u tr√∫c comboItems/discount.
 * (Lu·ªìng m·ªõi FE g·ª≠i snapshot n√™n c√≥ th·ªÉ kh√¥ng c·∫ßn h√†m n√†y, nh∆∞ng gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch.)
 */
async function computeComboPrice(comboProductDoc) {
  const combo = comboProductDoc?.toObject ? comboProductDoc.toObject() : comboProductDoc;
  if (!combo) return 0;

  // fixed (c√≥ th·ªÉ l√† comboPrice c≈©)
  const fixed = Number(combo.comboPrice || combo?.comboPricing?.fixedPrice || 0);
  if (fixed > 0) return fixed;

  let subtotal = 0;
  const items = Array.isArray(combo.comboItems) ? combo.comboItems : [];
  for (const it of items) {
    const pid = it?.product?._id || it?.product;
    if (!pid) continue;
    const p =
      it?.product && typeof it.product === "object"
        ? it.product
        : await Product.findById(pid).lean();
    if (!p) continue;
    subtotal += pickUnitPriceForProduct(p) * (Number(it?.qty || 1));
  }

  const percent =
    Number(combo?.comboPricing?.discountPercent || 0) ||
    Number(combo.comboDiscountPercent || 0);
  const total = toMoney(subtotal * (1 - Math.max(0, Math.min(percent, 100)) / 100));
  return total;
}

/* ===========================================================
 * Atomic stock helpers (non-transaction) + rollback
 * - Tr·ª´ stock ƒë√∫ng variant ƒë∆∞·ª£c ch·ªçn (kh√¥ng tr·ª´ theo 1kg)
 * - ƒê·ªêI V·ªöI COMBO: Tr·ª´ combo stock + stock c·ªßa t·ª´ng s·∫£n ph·∫©m con
 * =========================================================*/
async function decOneStockNonTx(item) {
  const qty = Math.max(1, Number(item.quantity || 1));

  // ‚úÖ COMBO: Tr·ª´ combo stock + stock c·ªßa t·ª´ng s·∫£n ph·∫©m con
  if (item?.isCombo) {
    return await deductComboStock(item, qty);
  }

  // ‚úÖ VARIANT: Tr·ª´ stock c·ªßa variant c·ª• th·ªÉ ƒë∆∞·ª£c ch·ªçn
  const pDoc = await Product.findById(item.product).lean();
  if (!pDoc) return { ok: false, reason: "product-not-found" };

  // ‚úÖ Debug: Log th√¥ng tin item v√† variants
  console.log("üîç [decOneStockNonTx] Item info:", {
    productId: item.product,
    variantId: item.variantId,
    variant: item.variant,
    quantity: qty
  });

  console.log("üîç [decOneStockNonTx] Available variants:", pDoc.variants?.map(v => ({
    _id: v._id,
    weight: v.attributes?.weight,
    ripeness: v.attributes?.ripeness,
    stock: v.stock
  })));

  // X√°c ƒë·ªãnh bi·∫øn th·ªÉ ƒë√£ ch·ªçn
  let chosen =
    (pDoc.variants || []).find((v) => String(v._id) === String(item.variantId)) || null;

  console.log("üîç [decOneStockNonTx] Found by variantId:", chosen ? {
    _id: chosen._id,
    weight: chosen.attributes?.weight,
    ripeness: chosen.attributes?.ripeness,
    stock: chosen.stock
  } : "NOT FOUND");

  if (!chosen) {
    const w = item?.variant?.weight ?? "";
    const r = item?.variant?.ripeness ?? "";
    console.log("üîç [decOneStockNonTx] Searching by attributes:", { weight: w, ripeness: r });
    
    if (w || r) {
      chosen = (pDoc.variants || []).find((v) =>
        isSameVariantAttr(v?.attributes || {}, { weight: w, ripeness: r })
      ) || null;
    }
    
    console.log("üîç [decOneStockNonTx] Found by attributes:", chosen ? {
      _id: chosen._id,
      weight: chosen.attributes?.weight,
      ripeness: chosen.attributes?.ripeness,
      stock: chosen.stock
    } : "NOT FOUND");
  }

  if (!chosen) {
    console.error("‚ùå [decOneStockNonTx] Variant not found for item:", item);
    return { ok: false, reason: "variant-not-found" };
  }

  // ‚úÖ Tr·ª´ stock c·ªßa variant c·ª• th·ªÉ ƒë∆∞·ª£c ch·ªçn
  console.log("üîç [decOneStockNonTx] Deducting stock for variant:", {
    variantId: chosen._id,
    weight: chosen.attributes?.weight,
    ripeness: chosen.attributes?.ripeness,
    stockBefore: chosen.stock,
    quantityToDeduct: qty,
    stockAfter: chosen.stock - qty
  });

  const resChosen = await Product.updateOne(
    { _id: item.product, "variants._id": chosen._id, "variants.stock": { $gte: qty } },
    { $inc: { "variants.$.stock": -qty } }
  );
  
  console.log("üîç [decOneStockNonTx] Update result:", {
    modifiedCount: resChosen.modifiedCount,
    matchedCount: resChosen.matchedCount
  });
  
  if (resChosen.modifiedCount > 0) {
    console.log("‚úÖ [decOneStockNonTx] Stock deducted successfully");
    return { 
      ok: true, 
      mode: "variant-specific", 
      chosenId: chosen._id,
      variant: {
        weight: chosen.attributes?.weight,
        ripeness: chosen.attributes?.ripeness,
        stockBefore: chosen.stock,
        stockAfter: chosen.stock - qty
      }
    };
  }

  console.error("‚ùå [decOneStockNonTx] Insufficient stock or update failed");
  return { ok: false, reason: "insufficient-stock" };
}

// ‚úÖ Helper function ƒë·ªÉ tr·ª´ combo stock
async function deductComboStock(item, qty) {
  const combo = await Product.findById(item.product).lean();
  if (!combo) return { ok: false, reason: "combo-not-found" };

  // 1) Tr·ª´ combo stock ch√≠nh
  const comboStock = combo?.comboInventory?.stock || combo?.comboStock || 0;
  if (comboStock < qty) {
    return { ok: false, reason: "insufficient-combo-stock" };
  }

  // Tr·ª´ combo stock
  const comboResult = await Product.updateOne(
    { _id: item.product, "comboInventory.stock": { $gte: qty } },
    { $inc: { "comboInventory.stock": -qty } }
  );

  if (comboResult.modifiedCount === 0) {
    return { ok: false, reason: "combo-stock-update-failed" };
  }

  // 2) Tr·ª´ stock c·ªßa t·ª´ng s·∫£n ph·∫©m con trong combo
  const comboItems = combo?.comboItems || [];
  const childStockUpdates = [];

  for (const comboItem of comboItems) {
    const childProduct = await Product.findById(comboItem.product).lean();
    if (!childProduct) continue;

    // T√¨m variant c·ªßa s·∫£n ph·∫©m con theo weight + ripeness
    const childVariant = (childProduct.variants || []).find(v => 
      v.attributes?.weight === comboItem.weight && 
      v.attributes?.ripeness === comboItem.ripeness
    );

    if (childVariant) {
      const childQty = (comboItem.qty || 1) * qty; // S·ªë l∆∞·ª£ng trong combo * s·ªë combo mua
      
      const childResult = await Product.updateOne(
        { 
          _id: comboItem.product, 
          "variants._id": childVariant._id, 
          "variants.stock": { $gte: childQty } 
        },
        { $inc: { "variants.$.stock": -childQty } }
      );

      if (childResult.modifiedCount > 0) {
        childStockUpdates.push({
          productId: comboItem.product,
          variantId: childVariant._id,
          weight: comboItem.weight,
          ripeness: comboItem.ripeness,
          qtyDeducted: childQty,
          stockBefore: childVariant.stock,
          stockAfter: childVariant.stock - childQty
        });
      }
    }
  }

  return { 
    ok: true, 
    mode: "combo-with-children", 
    comboStockBefore: comboStock,
    comboStockAfter: comboStock - qty,
    childStockUpdates
  };
}

async function rollbackOneStock(item, info) {
  if (!info?.ok) return;

  const qty = Math.max(1, Number(item.quantity || 1));

  // ‚úÖ COMBO: Ho√†n l·∫°i combo stock + stock c·ªßa t·ª´ng s·∫£n ph·∫©m con
  if (info.mode === "combo-with-children") {
    // Ho√†n l·∫°i combo stock ch√≠nh
    await Product.updateOne(
      { _id: item.product },
      { $inc: { "comboInventory.stock": qty } }
    );

    // Ho√†n l·∫°i stock c·ªßa t·ª´ng s·∫£n ph·∫©m con
    if (info.childStockUpdates && Array.isArray(info.childStockUpdates)) {
      for (const childUpdate of info.childStockUpdates) {
        await Product.updateOne(
          { _id: childUpdate.productId, "variants._id": childUpdate.variantId },
          { $inc: { "variants.$.stock": childUpdate.qtyDeducted } }
        );
      }
    }
    return;
  }

  // ‚úÖ VARIANT: Ho√†n l·∫°i stock c·ªßa variant c·ª• th·ªÉ
  if (info.mode === "variant-specific") {
    await Product.updateOne(
      { _id: item.product, "variants._id": info.chosenId },
      { $inc: { "variants.$.stock": qty } }
    );
    return;
  }

  // Legacy modes (gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch)
  if (info.mode === "base1kg") {
    const incUnits = Math.max(0, Number(info.decUnits || 0)) || Math.round(qty);
    await Product.updateOne(
      { _id: item.product, "variants._id": info.baseId },
      { $inc: { "variants.$.stock": incUnits } }
    );
    return;
  }

  if (info.mode === "variantsById" || info.mode === "variantsById-fallback") {
    await Product.updateOne(
      { _id: item.product, "variants._id": item.variantId },
      { $inc: { "variants.$.stock": qty } }
    );
    return;
  }

  if (info.mode === "variantsByAttr") {
    const w = info.selector?.w ?? item?.variant?.weight ?? "";
    const r = info.selector?.r ?? item?.variant?.ripeness ?? "";
    await Product.updateOne(
      {
        _id: item.product,
        "variants.attributes.weight": w,
        "variants.attributes.ripeness": r,
      },
      { $inc: { "variants.$.stock": qty } }
    );
  }
}

/* ===========================================================
 * T·∫°o Order (non-transaction)
 * - Nh·∫≠n cartItems ki·ªÉu M·ªöI:
 *   + type="combo" v·ªõi snapshot {title,image,unitPrice,items:[{productId,qty}],discountPercent?}
 *   + type null/"variant" v·ªõi { productId, quantity, variantId? | variant{weight,ripeness} }
 * - ‚ÄúTh√πng‚Äù v·∫´n l√† 1 variant nh∆∞ th∆∞·ªùng
 * - T·ªíN KHO: ∆∞u ti√™n tr·ª´ tr√™n bi·∫øn th·ªÉ 1kg
 * =========================================================*/
export const createOrder = async ({
  userId,
  cartItems = [],
  voucher,                 // code ho·∫∑c ObjectId
  address,                 // {_id} ho·∫∑c object ƒë·∫ßy ƒë·ªß
  paymentMethod = "cod",
}) => {
  // 1) ƒê·ªãa ch·ªâ giao h√†ng
  let addr = null;
  if (address?._id) {
    addr = await Address.findById(address._id).lean();
    if (!addr) throw new Error("ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng h·ª£p l·ªá");
  } else if (address && address.fullName && address.phone && address.province) {
    addr = address;
  } else {
    throw new Error("Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng");
  }

  // 2) Duy·ªát cart items
  if (!Array.isArray(cartItems) || cartItems.length === 0) {
    throw new Error("Gi·ªè h√†ng tr·ªëng");
  }

  const items = [];  // ƒë·ªÉ l∆∞u v√†o Order
  let subtotal = 0;

  for (const ci of cartItems) {
    const type = String(ci?.type || "variant").toLowerCase();

    /* ===== COMBO/MIX ki·ªÉu M·ªöI (snapshot price lock) ===== */
    if (type === "combo") {
      const qty = Math.max(1, Number(ci.quantity || 0));

      const snap = ci?.snapshot || {};
      const unitPrice = toMoney(snap.unitPrice || ci?.unitPrice || 0);
      const line = unitPrice * qty;

      const comboInfo = {
        title: snap.title || ci?.title || "Combo",
        image: snap.image || ci?.image || null,
        discountPercent: Number(snap.discountPercent || 0),
        items: Array.isArray(snap.items)
          ? snap.items.map((x) => ({ productId: x.productId, qty: Number(x.qty || 1) }))
          : [],
      };

      items.push({
        product: ci?.productId || null,
        productName: comboInfo.title,
        isCombo: true,
        quantity: qty,
        price: unitPrice,       // ƒë∆°n gi√° combo
        unitPriceFinal: unitPrice,
        lineTotal: line,
        combo: comboInfo,
        variantId: null,
        variant: null,
      });

      subtotal += line;
      continue;
    }

    /* ===== LEGACY COMBO (product.isCombo) ‚Äì v·∫´n h·ªó tr·ª£ n·∫øu c√≤n d√πng ===== */
    const product = await Product.findById(ci.productId).lean();
    if (!product) throw new Error(`S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i: ${ci.productId}`);

    const qty = Math.max(1, Number(ci.quantity || 0));

    if (product.isCombo === true || product?.type === "combo") {
      const unitPrice = await computeComboPrice(product);
      const line = unitPrice * qty;

      items.push({
        product: product._id,
        productName: product.name,
        isCombo: true,
        quantity: qty,
        price: unitPrice,
        unitPriceFinal: unitPrice,
        lineTotal: line,
        combo: {
          title: product.name,
          image: product.image || null,
          discountPercent:
            Number(product?.comboPricing?.discountPercent || 0) ||
            Number(product?.comboDiscountPercent || 0),
          items: Array.isArray(product?.comboItems)
            ? product.comboItems.map((x) => ({
                productId: x?.product?._id || x?.product,
                qty: Number(x?.qty || 1),
              }))
            : [],
        },
        variantId: null,
        variant: null,
      });

      subtotal += line;
      continue;
    }

    /* ===== S·∫¢N PH·∫®M TH∆Ø·ªúNG (bao g·ªìm ‚Äúth√πng‚Äù) ===== */
    let chosenVariant = null;

    if (ci.variantId) {
      chosenVariant =
        (product.variants || []).find((v) => String(v._id) === String(ci.variantId)) || null;
    }
    if (!chosenVariant && ci.variant) {
      const { weight = "", ripeness = "" } = ci.variant || {};
      chosenVariant = (product.variants || []).find((v) =>
        isSameVariantAttr(v?.attributes || {}, { weight, ripeness })
      ) || null;
    }
    if (!chosenVariant && product.baseVariant && product.baseVariant.price != null) {
      chosenVariant = {
        ...product.baseVariant,
        _id: product.baseVariant?._id || new mongoose.Types.ObjectId(),
      };
    }
    if (!chosenVariant) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph√π h·ª£p cho s·∫£n ph·∫©m ${product.name}`);
    }

    // Ki·ªÉm tra t·ªìn kho (∆∞u ti√™n 1kg)
    const base1kg = findBase1kgVariant(product);
    const weightKg = kgFromWeight(chosenVariant?.attributes?.weight) || 1;
    const needBaseUnits = Math.round(qty * weightKg);

    if (base1kg) {
      const baseRemain = Number(base1kg.stock || 0);
      if (baseRemain < needBaseUnits) {
        throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho (c·∫ßn ${needBaseUnits}kg) cho s·∫£n ph·∫©m ${product.name}`);
      }
    } else {
      const remain = Number(chosenVariant.stock || 0);
      if (remain < qty) {
        throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho cho s·∫£n ph·∫©m ${product.name}`);
      }
    }

    const unitPrice = Number(chosenVariant.price || 0);
    const line = unitPrice * qty;

    items.push({
      product: product._id,
      productName: product.name,
      isCombo: false,
      quantity: qty,
      price: unitPrice,
      unitPriceFinal: unitPrice,
      lineTotal: line,
      variant: {
        grade: "",
        weight: chosenVariant?.attributes?.weight || "",
        ripeness: chosenVariant?.attributes?.ripeness || "",
      },
      variantId: chosenVariant._id,
    });

    subtotal += line;
  }

  // 3) Ph√≠ ship
  let shippingFee = 0;
  let ruleName;
  try {
    const quoted = await quoteShipping({
      provinceCode: 1, // v√≠ d·ª•
      districtCode: String(addr.districtCode || addr.district_code || ""),
      wardCode: String(addr.wardCode || addr.ward_code || ""),
      cartSubtotal: subtotal,
    });
    shippingFee = Number(quoted?.amount || 0);
    ruleName = quoted?.ruleName;
  } catch (e) {
    console.warn("[order.service] quoteShipping l·ªói, d√πng 0ƒë:", e?.message || e);
  }

  // 4) Voucher
  let appliedVoucher = null;
  let discountAmount = 0;
  let vDoc = null;

  if (voucher) {
    if (typeof voucher === "string") {
      vDoc = await Voucher.findOne({ code: voucher.trim().toUpperCase() });
    } else if (mongoose.isValidObjectId(voucher)) {
      vDoc = await Voucher.findById(voucher);
    }

    if (!vDoc) throw new Error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");

    // ki·ªÉm tra voucher g√°n cho user (n·∫øu c√≥)
    if (Array.isArray(vDoc.assignedUsers) && vDoc.assignedUsers.length > 0) {
      const assigned = vDoc.assignedUsers.map(String);
      if (!assigned.includes(String(userId))) {
        throw new Error("M√£ gi·∫£m gi√° kh√¥ng thu·ªôc v·ªÅ b·∫°n");
      }
    }

    if (vDoc.discount > 0 && vDoc.discount <= 100) {
      discountAmount = (subtotal * vDoc.discount) / 100;
    } else {
      discountAmount = Number(vDoc.discount || 0);
    }

    if (vDoc.maxDiscount) {
      discountAmount = Math.min(discountAmount, Number(vDoc.maxDiscount || 0));
    }

    discountAmount = toMoney(discountAmount);
    appliedVoucher = vDoc._id;
  }

  // 5) T·ªïng ti·ªÅn
  const subtotalMoney = toMoney(subtotal);
  const shippingMoney = toMoney(shippingFee);
  const total = toMoney(subtotalMoney + shippingMoney - discountAmount);

  // 6) Tr·ª´ kho (non-transaction) + rollback
  const decLogs = [];
  try {
    for (const it of items) {
      const info = await decOneStockNonTx(it);
      if (!info.ok) {
        throw new Error(
          `H·∫øt h√†ng ho·∫∑c kh√¥ng ƒë·ªß t·ªìn kho cho bi·∫øn th·ªÉ ${it?.variant?.weight || ""} ${it?.variant?.ripeness || ""}`
        );
      }
      decLogs.push({ it, info });
    }
  } catch (stockErr) {
    for (const d of decLogs.reverse()) {
      try { await rollbackOneStock(d.it, d.info); } catch {}
    }
    throw stockErr;
  }

  // 7) L∆∞u Order (rollback kho n·∫øu l·ªói)
  let createdOrder = null;
  try {
    const order = new Order({
      user: userId,
      items, // ch·ª©a c·∫£ isCombo/combo
      total,
      subtotal: subtotalMoney,
      shippingFee: shippingMoney,
      shippingRuleName: ruleName || null,
      voucher: appliedVoucher || null,
      status: "pending",
      paymentStatus: paymentMethod === "momo" ? "paid" : "unpaid",
      paymentMethod,
      shippingAddress: {
        fullName: addr.fullName,
        phone: addr.phone,
        province: addr.province,
        district: addr.district,
        ward: addr.ward,
        detail: addr.detail,
        districtCode: addr.districtCode || addr.district_code || "",
        wardCode: addr.wardCode || addr.ward_code || "",
      },
    });

    createdOrder = await order.save();
  } catch (saveErr) {
    for (const d of decLogs.reverse()) {
      try { await rollbackOneStock(d.it, d.info); } catch {}
    }
    throw saveErr;
  }

  // 8) H·∫≠u x·ª≠ l√Ω
  // 8a) Gi·∫£m s·ªë l∆∞·ª£ng voucher (n·∫øu c√≥ qu·∫£n l√Ω s·ªë l∆∞·ª£ng)
  try {
    if (vDoc && vDoc.quantity != null && vDoc.quantity > 0) {
      vDoc.quantity -= 1;
      await vDoc.save();
    }
  } catch (e) {
    console.warn("[order.service] gi·∫£m s·ªë l∆∞·ª£ng voucher l·ªói:", e?.message || e);
  }

  // 8b) Xo√° c√°c item kh·ªèi gi·ªè (variant + combo) ‚Äì soft fail
  try {
    console.log("üõí [Order Service] Starting cart cleanup for user:", userId);
    const cart = await Cart.findOne({ user: userId });
    if (!cart) {
      console.log("üõí [Order Service] Cart not found for user:", userId);
      return;
    }
    
    console.log("üõí [Order Service] Cart before cleanup:", cart.items.length, "items");
    console.log("üõí [Order Service] Order items to remove:", items.map(item => ({
      productId: item.product,
      variantId: item.variantId,
      isCombo: item.isCombo,
      quantity: item.quantity
    })));
    
    for (const orderItem of items) {
      if (orderItem.variantId) {
        // Variant items: x√≥a theo product + variantId
        const variantItems = cart.items.filter(item => 
          item.type === "variant" && 
          item.product.toString() === orderItem.product.toString() &&
          item.variantId.toString() === orderItem.variantId.toString()
        );
        
        // X√≥a s·ªë l∆∞·ª£ng ƒë√£ mua
        let remainingQty = orderItem.quantity;
        for (const cartItem of variantItems) {
          if (remainingQty <= 0) break;
          
          if (cartItem.quantity <= remainingQty) {
            // X√≥a to√†n b·ªô item n√†y
            cart.items.pull(cartItem._id);
            remainingQty -= cartItem.quantity;
          } else {
            // Gi·∫£m s·ªë l∆∞·ª£ng
            cartItem.quantity -= remainingQty;
            remainingQty = 0;
          }
        }
      } else if (orderItem.isCombo) {
        // Combo items: x√≥a theo product + type
        const comboItems = cart.items.filter(item => 
          item.type === "combo" && 
          item.product.toString() === orderItem.product.toString()
        );
        
        // X√≥a s·ªë l∆∞·ª£ng ƒë√£ mua
        let remainingQty = orderItem.quantity;
        for (const cartItem of comboItems) {
          if (remainingQty <= 0) break;
          
          if (cartItem.quantity <= remainingQty) {
            // X√≥a to√†n b·ªô item n√†y
            cart.items.pull(cartItem._id);
            remainingQty -= cartItem.quantity;
          } else {
            // Gi·∫£m s·ªë l∆∞·ª£ng
            cartItem.quantity -= remainingQty;
            remainingQty = 0;
          }
        }
      }
    }
    
    await cart.save();
    console.log("üõí [Order Service] Cart after cleanup:", cart.items.length, "items");
    console.log("üõí [Order Service] Updated cart for user", userId, "after order");
  } catch (e) {
    console.warn("[order.service] remove-from-cart l·ªói (b·ªè qua):", e?.message || e);
  }

  // 8c) G√°n voucher theo chi ti√™u n·∫øu ƒë√£ thanh to√°n
  try {
    if (createdOrder?.paymentStatus === "paid") {
      await voucherService.assignVoucherBasedOnSpending(userId);
    }
  } catch (e) {
    console.warn("[order.service] assignVoucherBasedOnSpending error:", e?.message || e);
  }

  return createdOrder;
};

/* ======================== Admin utils ======================== */
export const getAllOrders = async () => {
  const orders = await Order.find()
    .populate("user", "username email")
    .populate("items.product", "name image")
    .populate("voucher", "code discount")
    .sort({ createdAt: -1 });
  return orders;
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
 * - N·∫øu delivered & COD => coi nh∆∞ ƒë√£ thanh to√°n
 * - Khi chuy·ªÉn sang paid => auto-assign voucher theo ng∆∞·ª°ng chi ti√™u
 */
export const updateOrderStatus = async (orderId, updates = {}) => {
  const { status, paymentStatus } = updates;

  const order = await Order.findById(orderId);
  if (!order) throw new Error("Order not found");

  let changed = false;

  if (status && status !== order.status) {
    order.status = status;
    changed = true;
  }

  if (paymentStatus && paymentStatus !== order.paymentStatus) {
    order.paymentStatus = paymentStatus;
    changed = true;
  }

  if (status === "delivered" && order.paymentMethod === "cod") {
    if (order.paymentStatus !== "paid") {
      order.paymentStatus = "paid";
      changed = true;
    }
  }

  if (changed) {
    await order.save();

    if (order.paymentStatus === "paid") {
      try {
        await voucherService.assignVoucherBasedOnSpending(order.user);
      } catch (err) {
        console.error("Auto-assign voucher error:", err.message);
      }
    }
  }

  return order;
};

// ‚úÖ Export rollbackOneStock ƒë·ªÉ s·ª≠ d·ª•ng trong controller
export { rollbackOneStock };
